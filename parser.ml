type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | FABS
  | FSQRT
  | FTOI
  | ITOF
  | READ_INT
  | READ_FLOAT
  | PRINT_CHAR
  | PRINT_INT
  | FLOOR
  | NOT
  | MINUS
  | PLUS
  | MUL
  | DIV
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* parser�����Ѥ����ѿ����ؿ������ʤɤ����� *)
open Syntax
let addtyp x = (x, Type.gentyp ())
# 52 "parser.ml"
let yytransl_const = [|
  260 (* FABS *);
  261 (* FSQRT *);
  262 (* FTOI *);
  263 (* ITOF *);
  264 (* READ_INT *);
  265 (* READ_FLOAT *);
  266 (* PRINT_CHAR *);
  267 (* PRINT_INT *);
  268 (* FLOOR *);
  269 (* NOT *);
  270 (* MINUS *);
  271 (* PLUS *);
  272 (* MUL *);
  273 (* DIV *);
  274 (* MINUS_DOT *);
  275 (* PLUS_DOT *);
  276 (* AST_DOT *);
  277 (* SLASH_DOT *);
  278 (* EQUAL *);
  279 (* LESS_GREATER *);
  280 (* LESS_EQUAL *);
  281 (* GREATER_EQUAL *);
  282 (* LESS *);
  283 (* GREATER *);
  284 (* IF *);
  285 (* THEN *);
  286 (* ELSE *);
  288 (* LET *);
  289 (* IN *);
  290 (* REC *);
  291 (* COMMA *);
  292 (* ARRAY_CREATE *);
  293 (* DOT *);
  294 (* LESS_MINUS *);
  295 (* SEMICOLON *);
  296 (* LPAREN *);
  297 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  287 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\004\000\007\000\007\000\003\000\
\003\000\005\000\005\000\006\000\006\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\006\000\002\000\003\000\
\003\000\003\000\003\000\006\000\005\000\002\000\001\000\008\000\
\007\000\003\000\003\000\001\000\004\000\002\000\001\000\002\000\
\001\000\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\044\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\000\019\000\031\000\000\000\
\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\034\000\035\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\046\000\000\000\000\000\053\000\052\000\000\000\
\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yydgoto = "\002\000\
\024\000\025\000\028\000\071\000\026\000\073\000\098\000"

let yysindex = "\255\255\
\162\255\000\000\000\000\000\000\000\000\000\000\110\255\110\255\
\110\255\110\255\110\255\110\255\110\255\110\255\110\255\162\255\
\162\255\162\255\162\255\000\000\029\255\110\255\117\255\031\004\
\031\255\232\254\240\254\110\255\110\255\110\255\110\255\110\255\
\110\255\110\255\110\255\110\255\000\000\000\000\000\000\183\003\
\252\254\004\255\036\255\035\255\000\000\189\255\162\255\162\255\
\162\255\162\255\162\255\162\255\162\255\162\255\162\255\162\255\
\162\255\162\255\162\255\162\255\162\255\162\255\030\255\110\255\
\162\255\033\255\240\254\162\255\162\255\043\255\045\255\041\255\
\237\254\240\254\000\000\020\255\020\255\020\255\020\255\020\255\
\020\255\000\000\000\000\167\255\167\255\167\255\167\255\167\255\
\167\255\217\255\031\004\162\255\217\255\162\255\209\003\235\003\
\043\255\065\255\162\255\058\255\060\255\070\255\127\003\155\003\
\162\255\162\255\000\000\162\255\031\004\000\000\000\000\162\255\
\055\255\000\000\057\004\031\004\031\004\005\004\162\255\162\255\
\057\004\031\004"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\094\000\
\105\000\217\001\042\000\133\000\161\000\189\000\217\000\245\000\
\029\001\070\001\105\001\133\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\161\001\
\000\000\000\000\077\000\000\000\000\000\000\000\000\000\000\000\
\000\000\189\001\000\000\245\001\017\002\057\002\098\002\133\002\
\161\002\000\000\000\000\189\002\217\002\245\002\009\003\029\003\
\049\003\252\000\077\002\000\000\062\003\000\000\000\000\000\000\
\075\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\112\002\000\000\000\000\000\000\
\001\000\000\000\069\003\252\002\066\255\000\000\000\000\000\000\
\085\003\099\003"

let yygindex = "\000\000\
\252\255\251\255\071\000\000\000\000\000\000\000\003\000"

let yytablesize = 1372
let yytable = "\001\000\
\007\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\065\000\037\000\038\000\039\000\040\000\101\000\
\044\000\069\000\046\000\027\000\066\000\102\000\067\000\067\000\
\067\000\067\000\067\000\067\000\067\000\067\000\067\000\004\000\
\005\000\006\000\070\000\004\000\005\000\006\000\074\000\053\000\
\054\000\049\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\067\000\041\000\093\000\020\000\042\000\095\000\
\096\000\020\000\072\000\063\000\043\000\092\000\023\000\066\000\
\094\000\097\000\023\000\100\000\048\000\099\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\108\000\103\000\
\110\000\104\000\111\000\112\000\119\000\054\000\109\000\064\000\
\047\000\000\000\045\000\107\000\115\000\116\000\000\000\117\000\
\008\000\000\000\000\000\118\000\000\000\000\000\004\000\005\000\
\006\000\000\000\121\000\122\000\003\000\004\000\005\000\006\000\
\007\000\008\000\009\000\010\000\011\000\012\000\013\000\014\000\
\015\000\016\000\017\000\000\000\009\000\000\000\018\000\000\000\
\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\
\019\000\000\000\000\000\020\000\021\000\023\000\000\000\000\000\
\022\000\000\000\000\000\000\000\023\000\045\000\000\000\000\000\
\010\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\
\010\000\011\000\012\000\013\000\014\000\015\000\016\000\017\000\
\000\000\000\000\000\000\018\000\047\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\011\000\019\000\000\000\000\000\
\020\000\021\000\000\000\000\000\000\000\022\000\000\000\000\000\
\000\000\023\000\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\012\000\000\000\000\000\000\000\000\000\000\000\000\000\061\000\
\000\000\000\000\000\000\062\000\000\000\075\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\013\000\000\000\000\000\000\000\
\000\000\000\000\000\000\051\000\000\000\000\000\000\000\000\000\
\000\000\007\000\007\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\014\000\007\000\007\000\007\000\
\000\000\007\000\000\000\007\000\000\000\007\000\000\000\007\000\
\007\000\007\000\049\000\049\000\049\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\015\000\049\000\049\000\
\049\000\000\000\049\000\000\000\049\000\048\000\048\000\048\000\
\049\000\049\000\049\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\016\000\048\000\048\000\048\000\000\000\048\000\000\000\048\000\
\000\000\000\000\000\000\048\000\048\000\048\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\017\000\008\000\008\000\000\000\
\000\000\008\000\000\000\008\000\000\000\000\000\000\000\008\000\
\000\000\008\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\038\000\009\000\009\000\000\000\000\000\009\000\000\000\009\000\
\000\000\000\000\000\000\009\000\000\000\009\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\043\000\010\000\010\000\000\000\
\000\000\010\000\000\000\010\000\000\000\000\000\000\000\010\000\
\000\000\010\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\039\000\011\000\011\000\000\000\000\000\011\000\000\000\011\000\
\000\000\000\000\000\000\011\000\000\000\011\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\021\000\012\000\012\000\000\000\
\000\000\012\000\000\000\012\000\000\000\000\000\000\000\012\000\
\000\000\012\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\020\000\013\000\013\000\000\000\000\000\013\000\000\000\013\000\
\051\000\051\000\000\000\013\000\051\000\013\000\051\000\000\000\
\000\000\000\000\051\000\000\000\051\000\000\000\000\000\000\000\
\000\000\000\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\022\000\014\000\014\000\000\000\000\000\014\000\000\000\014\000\
\000\000\000\000\000\000\014\000\000\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\023\000\015\000\015\000\000\000\000\000\015\000\000\000\
\015\000\000\000\000\000\000\000\015\000\000\000\015\000\037\000\
\000\000\000\000\000\000\000\000\000\000\000\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\033\000\016\000\016\000\000\000\
\000\000\016\000\000\000\016\000\000\000\000\000\000\000\016\000\
\000\000\016\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\032\000\017\000\017\000\000\000\000\000\017\000\000\000\017\000\
\000\000\000\000\000\000\017\000\000\000\017\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\024\000\038\000\038\000\000\000\
\000\000\038\000\000\000\038\000\000\000\000\000\000\000\038\000\
\000\000\038\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\025\000\043\000\043\000\000\000\000\000\043\000\000\000\043\000\
\000\000\000\000\000\000\043\000\000\000\043\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\028\000\039\000\039\000\000\000\
\000\000\039\000\000\000\036\000\000\000\000\000\000\000\039\000\
\000\000\039\000\021\000\021\000\021\000\021\000\021\000\021\000\
\029\000\000\000\021\000\021\000\021\000\021\000\021\000\021\000\
\000\000\021\000\021\000\000\000\000\000\021\000\000\000\021\000\
\000\000\000\000\000\000\021\000\026\000\021\000\020\000\020\000\
\020\000\020\000\020\000\020\000\000\000\000\000\020\000\020\000\
\020\000\020\000\020\000\020\000\000\000\020\000\020\000\000\000\
\027\000\020\000\000\000\020\000\000\000\000\000\000\000\020\000\
\000\000\020\000\000\000\000\000\000\000\050\000\000\000\000\000\
\000\000\000\000\000\000\000\000\030\000\000\000\022\000\022\000\
\022\000\022\000\022\000\022\000\000\000\000\000\022\000\022\000\
\022\000\022\000\022\000\022\000\041\000\022\000\022\000\000\000\
\000\000\022\000\000\000\022\000\000\000\000\000\000\000\022\000\
\000\000\022\000\040\000\000\000\000\000\000\000\000\000\000\000\
\000\000\042\000\042\000\000\000\000\000\042\000\000\000\023\000\
\023\000\023\000\023\000\023\000\023\000\042\000\000\000\023\000\
\023\000\023\000\023\000\023\000\023\000\000\000\023\000\023\000\
\000\000\000\000\023\000\000\000\023\000\000\000\000\000\000\000\
\023\000\000\000\023\000\000\000\037\000\037\000\000\000\000\000\
\037\000\000\000\033\000\033\000\033\000\033\000\033\000\033\000\
\037\000\000\000\033\000\033\000\033\000\033\000\033\000\033\000\
\000\000\033\000\033\000\000\000\000\000\033\000\000\000\033\000\
\000\000\000\000\000\000\033\000\000\000\033\000\032\000\032\000\
\032\000\032\000\032\000\032\000\000\000\000\000\032\000\032\000\
\032\000\032\000\032\000\032\000\000\000\032\000\032\000\000\000\
\000\000\032\000\000\000\032\000\000\000\000\000\000\000\032\000\
\000\000\032\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\024\000\024\000\024\000\024\000\024\000\
\000\000\024\000\024\000\000\000\000\000\024\000\000\000\024\000\
\000\000\000\000\000\000\024\000\000\000\024\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\025\000\025\000\
\025\000\025\000\025\000\025\000\000\000\025\000\025\000\000\000\
\000\000\025\000\000\000\025\000\000\000\000\000\000\000\025\000\
\000\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\028\000\028\000\028\000\028\000\028\000\028\000\
\000\000\028\000\028\000\000\000\000\000\028\000\000\000\028\000\
\036\000\036\000\000\000\028\000\036\000\028\000\029\000\029\000\
\029\000\029\000\029\000\029\000\036\000\029\000\029\000\000\000\
\000\000\029\000\000\000\029\000\000\000\000\000\000\000\029\000\
\000\000\029\000\026\000\026\000\026\000\026\000\026\000\026\000\
\000\000\026\000\026\000\000\000\000\000\026\000\000\000\026\000\
\000\000\000\000\000\000\026\000\000\000\026\000\027\000\027\000\
\027\000\027\000\027\000\027\000\000\000\027\000\027\000\000\000\
\000\000\027\000\000\000\027\000\000\000\000\000\000\000\027\000\
\000\000\027\000\050\000\050\000\000\000\000\000\050\000\000\000\
\050\000\030\000\030\000\000\000\050\000\030\000\050\000\000\000\
\000\000\000\000\000\000\030\000\000\000\030\000\000\000\000\000\
\000\000\041\000\041\000\000\000\000\000\041\000\000\000\000\000\
\000\000\000\000\000\000\041\000\000\000\041\000\000\000\040\000\
\040\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\040\000\047\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\061\000\000\000\000\000\000\000\062\000\000\000\113\000\
\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\061\000\000\000\000\000\
\000\000\062\000\000\000\114\000\047\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\000\000\068\000\000\000\000\000\000\000\000\000\
\000\000\061\000\000\000\000\000\000\000\062\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\000\000\000\000\105\000\000\000\
\000\000\000\000\000\000\061\000\000\000\000\000\000\000\062\000\
\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\000\000\000\000\
\000\000\000\000\000\000\106\000\000\000\061\000\000\000\000\000\
\000\000\062\000\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\000\000\000\000\000\000\000\000\000\000\120\000\000\000\061\000\
\000\000\000\000\000\000\062\000\047\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\061\000\000\000\000\000\000\000\062\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\061\000"

let yycheck = "\001\000\
\000\000\007\000\008\000\009\000\010\000\011\000\012\000\013\000\
\014\000\015\000\035\001\016\000\017\000\018\000\019\000\035\001\
\022\000\022\001\023\000\025\000\037\001\041\001\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\001\001\
\002\001\003\001\031\001\001\001\002\001\003\001\044\000\020\001\
\021\001\000\000\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\064\000\031\001\065\000\031\001\034\001\068\000\
\069\000\031\001\031\001\037\001\040\001\040\001\040\001\037\001\
\040\001\031\001\040\001\035\001\000\000\033\001\008\000\009\000\
\010\000\011\000\012\000\013\000\014\000\015\000\022\001\092\000\
\031\001\094\000\031\001\022\001\038\001\000\000\099\000\025\000\
\022\001\255\255\033\001\097\000\105\000\106\000\255\255\108\000\
\000\000\255\255\255\255\112\000\255\255\255\255\001\001\002\001\
\003\001\255\255\119\000\120\000\000\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\000\000\255\255\018\001\255\255\
\255\255\255\255\255\255\255\255\031\001\255\255\255\255\255\255\
\028\001\255\255\255\255\031\001\032\001\040\001\255\255\255\255\
\036\001\255\255\255\255\255\255\040\001\041\001\255\255\255\255\
\000\000\000\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\255\255\255\255\018\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\000\000\028\001\255\255\255\255\
\031\001\032\001\255\255\255\255\255\255\036\001\255\255\255\255\
\255\255\040\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\035\001\
\255\255\255\255\255\255\039\001\255\255\041\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\000\000\029\001\030\001\031\001\
\255\255\033\001\255\255\035\001\255\255\037\001\255\255\039\001\
\040\001\041\001\001\001\002\001\003\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\000\000\029\001\030\001\
\031\001\255\255\033\001\255\255\035\001\001\001\002\001\003\001\
\039\001\040\001\041\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\000\000\029\001\030\001\031\001\255\255\033\001\255\255\035\001\
\255\255\255\255\255\255\039\001\040\001\041\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\000\000\029\001\030\001\255\255\
\255\255\033\001\255\255\035\001\255\255\255\255\255\255\039\001\
\255\255\041\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\000\000\029\001\030\001\255\255\255\255\033\001\255\255\035\001\
\255\255\255\255\255\255\039\001\255\255\041\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\000\000\029\001\030\001\255\255\
\255\255\033\001\255\255\035\001\255\255\255\255\255\255\039\001\
\255\255\041\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\000\000\029\001\030\001\255\255\255\255\033\001\255\255\035\001\
\255\255\255\255\255\255\039\001\255\255\041\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\000\000\029\001\030\001\255\255\
\255\255\033\001\255\255\035\001\255\255\255\255\255\255\039\001\
\255\255\041\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\000\000\029\001\030\001\255\255\255\255\033\001\255\255\035\001\
\029\001\030\001\255\255\039\001\033\001\041\001\035\001\255\255\
\255\255\255\255\039\001\255\255\041\001\255\255\255\255\255\255\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\000\000\029\001\030\001\255\255\255\255\033\001\255\255\035\001\
\255\255\255\255\255\255\039\001\255\255\041\001\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\000\000\029\001\030\001\255\255\255\255\033\001\255\255\
\035\001\255\255\255\255\255\255\039\001\255\255\041\001\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\000\000\029\001\030\001\255\255\
\255\255\033\001\255\255\035\001\255\255\255\255\255\255\039\001\
\255\255\041\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\000\000\029\001\030\001\255\255\255\255\033\001\255\255\035\001\
\255\255\255\255\255\255\039\001\255\255\041\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\000\000\029\001\030\001\255\255\
\255\255\033\001\255\255\035\001\255\255\255\255\255\255\039\001\
\255\255\041\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\000\000\029\001\030\001\255\255\255\255\033\001\255\255\035\001\
\255\255\255\255\255\255\039\001\255\255\041\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\000\000\029\001\030\001\255\255\
\255\255\033\001\255\255\000\000\255\255\255\255\255\255\039\001\
\255\255\041\001\014\001\015\001\016\001\017\001\018\001\019\001\
\000\000\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\255\255\255\255\033\001\255\255\035\001\
\255\255\255\255\255\255\039\001\000\000\041\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\029\001\030\001\255\255\
\000\000\033\001\255\255\035\001\255\255\255\255\255\255\039\001\
\255\255\041\001\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\000\000\029\001\030\001\255\255\
\255\255\033\001\255\255\035\001\255\255\255\255\255\255\039\001\
\255\255\041\001\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\029\001\030\001\255\255\255\255\033\001\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\041\001\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\029\001\030\001\
\255\255\255\255\033\001\255\255\035\001\255\255\255\255\255\255\
\039\001\255\255\041\001\255\255\029\001\030\001\255\255\255\255\
\033\001\255\255\014\001\015\001\016\001\017\001\018\001\019\001\
\041\001\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\255\255\255\255\033\001\255\255\035\001\
\255\255\255\255\255\255\039\001\255\255\041\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\029\001\030\001\255\255\
\255\255\033\001\255\255\035\001\255\255\255\255\255\255\039\001\
\255\255\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\255\255\255\255\033\001\255\255\035\001\
\255\255\255\255\255\255\039\001\255\255\041\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\029\001\030\001\255\255\
\255\255\033\001\255\255\035\001\255\255\255\255\255\255\039\001\
\255\255\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\255\255\255\255\033\001\255\255\035\001\
\029\001\030\001\255\255\039\001\033\001\041\001\022\001\023\001\
\024\001\025\001\026\001\027\001\041\001\029\001\030\001\255\255\
\255\255\033\001\255\255\035\001\255\255\255\255\255\255\039\001\
\255\255\041\001\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\255\255\255\255\033\001\255\255\035\001\
\255\255\255\255\255\255\039\001\255\255\041\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\029\001\030\001\255\255\
\255\255\033\001\255\255\035\001\255\255\255\255\255\255\039\001\
\255\255\041\001\029\001\030\001\255\255\255\255\033\001\255\255\
\035\001\029\001\030\001\255\255\039\001\033\001\041\001\255\255\
\255\255\255\255\255\255\039\001\255\255\041\001\255\255\255\255\
\255\255\029\001\030\001\255\255\255\255\033\001\255\255\255\255\
\255\255\255\255\255\255\039\001\255\255\041\001\255\255\029\001\
\030\001\255\255\255\255\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\041\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\035\001\255\255\255\255\255\255\039\001\255\255\041\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\035\001\255\255\255\255\
\255\255\039\001\255\255\041\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\029\001\255\255\255\255\255\255\255\255\
\255\255\035\001\255\255\255\255\255\255\039\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\030\001\255\255\
\255\255\255\255\255\255\035\001\255\255\255\255\255\255\039\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\033\001\255\255\035\001\255\255\255\255\
\255\255\039\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\033\001\255\255\035\001\
\255\255\255\255\255\255\039\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\035\001\255\255\255\255\255\255\039\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\035\001"

let yynames_const = "\
  FABS\000\
  FSQRT\000\
  FTOI\000\
  ITOF\000\
  READ_INT\000\
  READ_FLOAT\000\
  PRINT_CHAR\000\
  PRINT_INT\000\
  FLOOR\000\
  NOT\000\
  MINUS\000\
  PLUS\000\
  MUL\000\
  DIV\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 74 "parser.mly"
    ( _2 )
# 583 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
    ( Unit )
# 589 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 78 "parser.mly"
    ( Bool(_1) )
# 596 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 80 "parser.mly"
    ( Int(_1) )
# 603 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 82 "parser.mly"
    ( Float(_1) )
# 610 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 84 "parser.mly"
    ( Var(_1) )
# 617 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 86 "parser.mly"
    ( Get(_1, _4) )
# 625 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 90 "parser.mly"
    ( _1 )
# 632 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 91 "parser.mly"
                                                      ( Fabs (_2)     )
# 639 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 92 "parser.mly"
                                                      ( Fsqrt(_2)     )
# 646 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 93 "parser.mly"
                                                      ( FtoI(_2)      )
# 653 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 94 "parser.mly"
                                                      ( ItoF(_2)      )
# 660 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 95 "parser.mly"
                                                      ( ReadInt(_2)   )
# 667 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 96 "parser.mly"
                                                      ( ReadFloat(_2) )
# 674 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 97 "parser.mly"
                                                      ( PrintChar(_2) )
# 681 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 98 "parser.mly"
                                                      ( PrintInt(_2)  )
# 688 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 99 "parser.mly"
                                                      ( Floor(_2)     )
# 695 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 102 "parser.mly"
    ( Not(_2) )
# 702 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 105 "parser.mly"
    ( match _2 with
    | Float(f) -> Float(-.f) (* -1.23�ʤɤϷ����顼�ǤϤʤ��Τ��̰��� *)
    | e -> Neg(e) )
# 711 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 109 "parser.mly"
    ( Add(_1, _3) )
# 719 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 111 "parser.mly"
    ( Sub(_1, _3) )
# 727 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 113 "parser.mly"
    ( Mul (_1, _3)    )
# 735 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 115 "parser.mly"
    ( Div (_1, _3)    )
# 743 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 117 "parser.mly"
    ( Eq(_1, _3) )
# 751 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 119 "parser.mly"
    ( Not(Eq(_1, _3)) )
# 759 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 121 "parser.mly"
    ( Not(LE(_3, _1)) )
# 767 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 123 "parser.mly"
    ( Not(LE(_1, _3)) )
# 775 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 125 "parser.mly"
    ( LE(_1, _3) )
# 783 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 127 "parser.mly"
    ( LE(_3, _1) )
# 791 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 130 "parser.mly"
    ( If(_2, _4, _6) )
# 800 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 133 "parser.mly"
    ( FNeg(_2) )
# 807 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 135 "parser.mly"
    ( FAdd(_1, _3) )
# 815 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 137 "parser.mly"
    ( FSub(_1, _3) )
# 823 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 139 "parser.mly"
    ( FMul(_1, _3) )
# 831 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 141 "parser.mly"
    ( FDiv(_1, _3) )
# 839 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 144 "parser.mly"
    ( Let(addtyp _2, _4, _6) )
# 848 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 147 "parser.mly"
    ( LetRec(_3, _5) )
# 856 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 150 "parser.mly"
    ( App(_1, _2) )
# 864 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 153 "parser.mly"
    ( Tuple(_1) )
# 871 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 155 "parser.mly"
    ( LetTuple(_3, _6, _8) )
# 880 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 157 "parser.mly"
    ( Put(_1, _4, _7) )
# 889 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 159 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 897 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 162 "parser.mly"
    ( Array(_2, _3) )
# 905 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 164 "parser.mly"
    ( failwith
        (Printf.sprintf "parse error near characters %d-%d"
           (Parsing.symbol_start ())
           (Parsing.symbol_end ())) )
# 914 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 171 "parser.mly"
    ( { name = addtyp _1; args = _2; body = _4 } )
# 923 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 175 "parser.mly"
    ( addtyp _1 :: _2 )
# 931 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 177 "parser.mly"
    ( [addtyp _1] )
# 938 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 182 "parser.mly"
    ( _1 @ [_2] )
# 946 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 185 "parser.mly"
    ( [_1] )
# 953 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 189 "parser.mly"
    ( _1 @ [_3] )
# 961 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 191 "parser.mly"
    ( [_1; _3] )
# 969 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 195 "parser.mly"
    ( _1 @ [addtyp _3] )
# 977 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 197 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 985 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
